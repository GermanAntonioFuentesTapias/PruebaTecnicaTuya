--sql Consultaa 1
'''
SELECT
    COUNT(id_orden) AS total_ordenes
FROM
    orden;
'''
--sql Consulta 2
'''
SELECT
    COUNT(DISTINCT c.cedula) AS numero_clientes_con_ordenes
FROM
    cliente c
INNER JOIN
    orden o ON c.cedula = o.cedula
WHERE
    o.fecha_orden >= '2021-01-01' AND o.fecha_orden <= CURRENT_DATE();
-- (GETDATE o NOW())
'''
--sql Consulta 3
'''
WITH ClienteProductoMasComprado AS (
    SELECT
        c.cedula,
        p.nombre_producto,
        COUNT(d.cantidad) AS cantidad_comprada,
        ROW_NUMBER() OVER (PARTITION BY c.cedula ORDER BY COUNT(d.cantidad) DESC, p.nombre_producto ASC) AS rn
    FROM
        cliente c
    INNER JOIN
        orden o ON c.cedula = o.cedula
    INNER JOIN
        detalle_orden d ON o.id_orden = d.id_orden
    INNER JOIN
        producto p ON d.id_producto = p.id_producto
    GROUP BY
        c.cedula, p.nombre_producto
)
SELECT
    c.id_cliente,
    c.nombre AS nombre_cliente,
    COUNT(o.id_orden) AS cantidad_total_ordenes,
    SUM(o.total_pedido) AS valor_total_gastado,
    MAX(CASE WHEN cpmc.rn = 1 THEN cpmc.nombre_producto ELSE NULL END) AS producto_mas_comprado
FROM
    cliente c
LEFT JOIN
    orden o ON c.cedula = o.cedula
LEFT JOIN
    ClienteProductoMasComprado cpmc ON c.cedula = cpmc.cedula
WHERE
    cpmc.rn = 1 OR cpmc.cedula IS NULL -- Asegura que incluya clientes sin órdenes y que solo traiga el producto principal
GROUP BY
    c.cedula, c.nombre
ORDER BY
    cantidad_total_ordenes DESC;
'''
--sql Consulta 4
'''
SELECT
      c.nombre As cliente_nombre,
      c.telefono As cliente_telefono,
      o.fecha_orden,
      o.total_pedido,
      p.nombre_producto,
      do.cantidad
FROM
    cliente c
INNER JOIN 
    orden o ON c.cedula = o.cedula

'''
-- sql Consulta 5
'''
SELECT
     YEAR(fecha_orden) AS Año, --- Para SQL Server
     MONTH(fecha_orden) AS Mes,
     SUM(total_pedido) AS valor_total_vendido_AM
FROM
    orden
GROUP BY
   YEAR(fecha_orden),
   MONTH(fecha_orden)
ORDER BY
  Año,Mes;
'''
--- sql Consulta 6
'''
SELECT
      pr.nombre_producto,
      COUNT(DISTINCT o.id_orden) AS Cantidad_veces_comprado,
      SUM(do.cantidad * do.precio_unitario) As Valor_total_en_producto
FROM
     cliente c
INNER JOIN
   orden o ON c.cedula = o.cedula
INNER JOIN
   detalle_orden do ON o.id_orden = do.id_orden
INNER JOIN
   producto pr ON do.id_producto = pr.id_producto
WHERE
    c.cedula = 123456
GROUP BY
    pr.nombre_producto
ORDER BY
    Valor_total_en_producto DESC;
'''
-- sql Consulta 7
1.  **Creación de la Nueva Tabla con Esquema Extendido:**
    * Se crea una nueva tabla (ej. `historia_ordenes_mensual_v2`) que replica la estructura de la tabla histórica original (`historia_ordenes_mensual`) pero incluyendo la nueva columna `ciudad_cliente` (y cualquier otra columna futura si se anticipa).

    ```sql
    -- Ejemplo (asumiendo columnas relevantes de la tabla histórica)
    CREATE TABLE historia_ordenes_mensual_v2 (
        id_orden INT,
        fecha_orden DATETIME,
        total_pedido DECIMAL(12,2),
        ciudad_cliente VARCHAR(50) NULL -- Nueva columna
    );
    ```

2.  **Migración de Datos Históricos Existentes:**
    * Se insertan todos los datos de la tabla histórica original (`historia_ordenes_mensual`) en la nueva tabla (`historia_ordenes_mensual_v2`). Para la nueva columna `ciudad_cliente`, se insertará `NULL` o un valor por defecto, ya que esta información no estaba disponible para los períodos anteriores.

    ```sql
    INSERT INTO historia_ordenes_mensual_v2 (
        id_orden,
        fecha_orden,
        total_pedido
        -- ... otras columnas
    )
    SELECT
        id_orden,
        fecha_orden,
        total_pedido
    FROM
        historia_ordenes_mensual;
    ```

3.  **Carga de los Nuevos Datos del Último Mes:**
    * Los datos del último mes, que ya incluyen la información de la `ciudad_cliente`, se cargan directamente en la nueva tabla (`historia_ordenes_mensual_v2`). Esto requerirá un proceso de ETL que extraiga la `ciudad_cliente` de su fuente (ej. tabla `cliente`).

    ```sql
    INSERT INTO historia_ordenes_mensual_v2 (
        id_orden,
        fecha_orden,
        total_pedido,
        ciudad_cliente
    )
    SELECT
        o.id_orden,
        o.fecha_orden,
        o.total_pedido,
        c.nombre_ciudad 
        orden o
    INNER JOIN
        cliente c ON o.id_cliente = c.id_cliente
    WHERE
        o.fecha_orden >= 'YYYY-MM-01' AND o.fecha_orden < 'YYYY-MM-01_siguiente_mes';
    ```

4.  **Gestión de la Transición:**
    * Una vez que la nueva tabla (`historia_ordenes_mensual_v2`) esté completa y validada, se debe realizar una transición. Las opciones incluyen:
        * **Redireccionar Consultas:** Actualizar todas las aplicaciones, reportes y consultas que actualmente utilizan `historia_ordenes_mensual` para que, en su lugar, consulten `historia_ordenes_mensual_v2`. Esta es la opción más segura si las restricciones son muy estrictas.
        * **Renombrar Tablas (si permitido):** Si el SGBD lo permite y las restricciones de `ALTER TABLE` no se aplican a `RENAME TABLE`, se podría renombrar `historia_ordenes_mensual` a `historia_ordenes_mensual_old` y luego `historia_ordenes_mensual_v2` a `historia_ordenes_mensual`. Sin embargo, esto debe confirmarse ya que el `RENAME` puede tener implicaciones similares a `ALTER`.

5.  **Validación y Limpieza (Opcional):**
    * Realizar pruebas exhaustivas para asegurar la integridad y la corrección de los datos en la nueva tabla.
    * Una vez que la nueva tabla esté en producción y funcionando sin problemas, la tabla `historia_ordenes_mensual_old` puede ser archivada o eliminada.1.  **Creación de la Nueva Tabla con Esquema Extendido:**
    * Se crea una nueva tabla pero incluyendo la nueva columna `ciudad_cliente` (y cualquier otra columna futura si se anticipa).

    ```sql
    -- Ejemplo (asumiendo columnas relevantes de la tabla histórica)
    CREATE TABLE historia_ordenes_mensual_v2 (
        id_orden INT,
        fecha_orden DATETIME,
        total_pedido DECIMAL(12,2),
        ciudad_cliente VARCHAR(50) NULL -- Nueva columna
    );
    ```

